{"meta":{"title":"Kerr&Ann","subtitle":null,"description":"长路漫漫任我闯↗↗","author":"Kerr","url":""},"pages":[{"title":"about","date":"2020-07-10T12:31:42.585Z","updated":"2020-07-10T12:31:42.585Z","comments":false,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"bangumi","date":"2020-09-28T13:29:29.659Z","updated":"2020-07-10T12:14:27.113Z","comments":false,"path":"bangumi/index.html","permalink":"/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-09-28T13:30:09.643Z","comments":true,"path":"comment/index.html","permalink":"/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"donate/index.html","permalink":"/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"links/index.html","permalink":"/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"/rss/index.html","excerpt":"","text":""},{"title":"music","date":"2020-07-08T15:22:08.035Z","updated":"2020-07-08T15:22:08.035Z","comments":false,"path":"music/index.html","permalink":"/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-07-10T12:15:37.778Z","comments":false,"path":"video/index.html","permalink":"/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"}],"posts":[{"title":"谈谈ArrayList和LinkedList的区别","slug":"009-谈谈ArrayList和LinkedList的区别","date":"2020-10-02T05:41:02.000Z","updated":"2020-10-02T06:21:44.729Z","comments":true,"path":"2020/10/02/009-谈谈ArrayList和LinkedList的区别/","link":"","permalink":"/2020/10/02/009-谈谈ArrayList和LinkedList的区别/","excerpt":"","text":"1，底层数据结构的差异 ArrayList，数组，连续一块内存空间LinkedList，双向链表，不是连续的内存空间 2，一个常规的结论虽然不严谨，但也可以应付很多面试了 ArrayList，查找快，因为是连续的内存空间，方便寻址，但删除，插入慢，因为需要发生数据迁移LinkedList，查找慢，因为需要通过指针一个个寻找，但删除，插入块，因为只要改变前后节点的指针指向即可。 3，ArrayList细节分析1，增加 添加到末尾，正常不需要做特别的处理，除非现有的数组空间不够了，需要扩容 数组初始化容量多大？10，当你知道需要存储多少数据时，建议在创建的时候，直接设置初始化大小 怎么扩容？ 当发现容量不够之后，就进行扩容 按原先数组容量的1.5倍进行扩容，通过位运算（效率高），下面是关键的源码 int oldCapacity = elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); 再将原先数组的元素复制到新数组，Arrays elementData = Arrays.copyOf(elementData, newCapacity) 添加到其他位置，这个时候需要做整体的搬迁 2，删除 删除末尾，并不需要迁移 删除其他的位置，这个时候也需要搬迁 3，修改 修改之前，必须先定位 定位-查找-ArrayList（数组是一段连续的内存空间，定位会特别快） 4，查找 如上所述 4，LinkedList细节分析1，提供了的两个引用（first，last）2，增加添加到末尾，创建一个新的节点，将之前的last节点设置为新节点的pre，新节点设置为last 我们看下源码： void linkLast(E e) { //获取到最后一个节点 final Node&lt;E&gt; l = last; //构建一个新节点，将当前的last作为这个新节点的pre final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); //把last指向新节点 last = newNode; //如果原先没有最后一个节点 if (l == null) //将first指向新节点 first = newNode; else //否则，将原先的last的next指向新节点 l.next = newNode; size++; modCount++; } Node节点的定义：内部类 private static class Node&lt;E&gt; { E item; Node&lt;E&gt; next; Node&lt;E&gt; prev; Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) { this.item = element; this.next = next; this.prev = prev; } } 添加到其他位置，这个时候，就需要调整前后节点的引用指向 3，如何去定义一个双向链表的节点，如上述的源码所示4，修改修改最后一个节点或者第一个节点，那么就很快（first，last） 修改其他位置，如果是按坐标来定位节点，则会按照二分查找法，源码如下： if (index &lt; (size &gt;&gt; 1)) { Node&lt;E&gt; x = first; for (int i = 0; i &lt; index; i++) x = x.next; return x; } else { Node&lt;E&gt; x = last; for (int i = size - 1; i &gt; index; i--) x = x.prev; return x; } 5，一个思考题，假如我们可以确定要存储1000个元素，那么采用ArrayList和LinkedList，哪个更耗内存，为什么？ 6，LinkedList，要实现在A和B之间插入C，该如何实现，编写伪代码即可","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"008-List和Set的区别","slug":"008-List和Set的区别","date":"2020-10-02T05:35:13.000Z","updated":"2020-10-02T06:16:01.783Z","comments":true,"path":"2020/10/02/008-List和Set的区别/","link":"","permalink":"/2020/10/02/008-List和Set的区别/","excerpt":"","text":"List（有序，可重复）：子类-&gt;ArrayList、LinkedList Set（无序，不可重复）：子类-&gt;HashSet、TreeSet（此无序！=可排序） Collections和Collection的区别： ​ Java里工具类的命名：+s结尾","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"007-方法的重写和重载的区别","slug":"007-方法的重写和重载的区别","date":"2020-10-02T05:29:57.000Z","updated":"2020-10-02T05:32:39.033Z","comments":true,"path":"2020/10/02/007-方法的重写和重载的区别/","link":"","permalink":"/2020/10/02/007-方法的重写和重载的区别/","excerpt":"","text":"重载：发生在一个类里面，方法名相同，参数列表不同（混淆点：跟返回类型没关系） 以下不构成重载public double add(int a,int b)public int add(int a,int b)​ 重写：发生在父类子类之间的，方法名相同，参数列表相同","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"006.Integer和int","slug":"006-Integer和int","date":"2020-10-02T05:22:55.000Z","updated":"2020-10-02T05:29:38.903Z","comments":true,"path":"2020/10/02/006-Integer和int/","link":"","permalink":"/2020/10/02/006-Integer和int/","excerpt":"","text":"public static void main(String[] args){ Integer i1 = new Integer(12); Integer i2 = new Integer(12); System.out.println(i1 == i2); // false Integer i3 = 126; Integer i4 = 126; // 反编译工具 Integer.valueOf(126); int i5 = 126; System.out.println(i3 == i4); // true System.out.println(i3 == i5); // true 自动拆箱，数值 Integer i6 = 128; Integer i7 = 128; int i8 = 128; System.out.println(i6 == i7); // false System.out.println(i6 == i8); // true 自动拆箱，数值 } 第一个sout（sout指的是System.out.println()）中，是两个引用类型比较，比较的是地址，很显然，i1和i2是new出来的，因此占用了两块堆空间，也就是说i1和i2的地址不一样。 第二个：i3和i4是基本类型，都没有new；而左边是Integer类引用类型，因此这种语句有一个装箱操作； 而基本类型赋值给引用类型，需要装箱操作。JDK1.5之后，有自动装箱操作。i3 i4都还在缓存最小值low-128和最大值high127之间，直接用缓存里面的数据，答案是true。如果超出这个范围，需要重新new一个出来，这样的话结果就不一样了。 第三个：当引用类型和基本类型比较时，需要进行自动拆箱，将包装类Integer转换成int型，最后比较的是二者的数值。所以答案是true。 第四个：128已经越界，因此需要new一个出来，那么两个引用类型比较，比较地址，二者分别new，地址肯定不一样。 第五个：同第三个。 结论：1️⃣、引用类型和引用类型比较，需要判断是否越界[-128,127]： 1）不越界：true；因为不需要new； 2）越界：false；因为需要new。 2️⃣、引用类型和基本类型比较，直接看数值，因为引用类型要自 动拆箱，然后再比较。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"记第一次喝吐~~~","slug":"记第一次喝吐","date":"2020-09-28T13:37:34.000Z","updated":"2020-09-28T13:56:26.586Z","comments":true,"path":"2020/09/28/记第一次喝吐/","link":"","permalink":"/2020/09/28/记第一次喝吐/","excerpt":"","text":"2020年9月27日晚九点半左右，为老磊庆生（实际上生日早就过去了好几天~~~）。 ​ 逞能了一把，以为自己白啤配很能喝。。。先喝了一杯啤的润润口，然后蹦起来白的倒满，快速的喝完之后，接着玩起了游戏，没想到竟然大大的输了一把。。。用一个大的喝扎啤的杯子倒了满满一杯（应该一瓶啤酒的量），吨吨吨~喝完之后想撒尿。。。撤硕有yin，就站那等着。我是万万妹想到啊，越站越晕，等里边俩男的出来之后，额不对，没记错的话是三个男的，从一个两平出头的小撤硕出来了。然后我上完撤硕之后回去就不行了，开始出汗，脸色苍白，有了晕车那种感觉。。。就趴那里等其他人玩完游戏回家。​ 十几分钟后，晚宴结束，出了门，老磊付款的时候，我坚持不住，吐院子里了~~~​ 事后，大家对我都特好，又是送水又是问候。。。太温暖了~","categories":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}],"tags":[{"name":"随想","slug":"随想","permalink":"/tags/随想/"}],"keywords":[{"name":"生活","slug":"生活","permalink":"/categories/生活/"}]},{"title":"005.递归必备掌握题目","slug":"005-递归必备掌握题目","date":"2020-09-28T09:07:56.000Z","updated":"2020-09-28T09:12:11.599Z","comments":true,"path":"2020/09/28/005-递归必备掌握题目/","link":"","permalink":"/2020/09/28/005-递归必备掌握题目/","excerpt":"","text":"递归这道算法题一般考查的递归的编程技能，那么我们回顾下递归程序的特点： 1，什么是递归？ 递归，就是方法内部调用方法自身递归的注意事项：找到规律，编写递归公式找到出口（边界值），让递归有结束边界 注意：如果递归太多层，或者没有正确结束递归，则会出现“栈内存溢出Error”！ 问题：为什么会出现栈内存溢出，而不是堆内存溢出？ ​ 因为每次调用的方法是在栈中创建栈帧的空间，而不是堆。 2，这道题该怎么写？ 规律：N!=（n-1）!*n; 出口：n == 1或 n == 0 return 1; /** * 1.n的阶乘 * @param n * @return */ public static int getResult(int n) { if (n &lt; 0) { throw new IllegalArgumentException(&quot;非法参数&quot;); } if (n == 0 || n == 1) { return 1; } return getResult(n - 1) * n; } 3，如何实现递归求斐波那切数列第N个数字的值（传说中的不死神兔就是这个问题） 数字的规律：1,1,2,3,5,8,13,21….（第三个数等于前两个数之和） 所以，我们可以分析编写如下： /** 规律：每个数等于前两个数之和 出口：第一项和第二项都等于1 */ /** * 2. 斐波那契数列（求第n项的值） * @param n * @return */ public static int getFeiBo(int n){ if (n&lt;0){ return -1; } if (n==0 || n==1){ return 1; }else{ return getFeiBo(n-1)+getFeiBo(n-2); } }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"004.接口和抽象类","slug":"004-接口和抽象类","date":"2020-09-28T09:03:45.000Z","updated":"2020-09-28T09:06:31.030Z","comments":true,"path":"2020/09/28/004-接口和抽象类/","link":"","permalink":"/2020/09/28/004-接口和抽象类/","excerpt":"","text":"接口和抽象类这个问题，要分JDK版本来区分回答： JDK1.8之前： 语法： 抽象类：方法可以有抽象的，也可以有非抽象, 有构造器 接口：方法都是抽象，属性都是常量，默认有public static final修饰（接口实际上就是一种契约） 设计： 抽象类：同一类事物的抽取，比如针对Dao层操作的封装，如，BaseDao，BaseServiceImpl 接口：通常更像是一种标准的制定，定制系统之间对接的标准 例子： 1，单体项目，分层开发，interface作为各层之间的纽带，在controller中注入IUserService，在Service注入IUserDao 2，分布式项目，面向服务的开发，抽取服务service，这个时候，就会产生服务的提供者和服务的消费者两个角色 这两个角色之间的纽带，依然是接口 JDK1.8之后： 接口里面可以有实现的方法，注意要在方法的声明上加上default或者static 最后区分几个概念： 多继承，多重继承，多实现 多重继承：A-&gt;B-&gt;C（爷孙三代的关系） 多实现：Person implements IRunable,IEatable（符合多项国际化标准） 多继承：接口可以多继承，类只支持单继承 面向接口编程的好处：解耦。比如分层开发的时候，上一层调用下一层，为了解耦，不要调具体的实现，要使用接口将二者连接起来，那么上层和下层就解耦了。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"003.String_StringBuffer_String_Builder的区别","slug":"003-String-StringBuffer-String-Builder的区别","date":"2020-09-28T08:59:27.000Z","updated":"2020-09-28T09:03:54.472Z","comments":true,"path":"2020/09/28/003-String-StringBuffer-String-Builder的区别/","link":"","permalink":"/2020/09/28/003-String-StringBuffer-String-Builder的区别/","excerpt":"","text":"String 跟其他两个类的区别是 String是final类型，每次声明的都是不可变的对象，所以每次操作都会产生新的String对象，然后将指针指向新的String对象。 StringBuffer，StringBuilder都是在原有对象上进行操作 所以，如果需要经常改变字符串内容，则建议采用这两者。 StringBuffer vs StringBuilder 前者是线程安全的，后者是线程不安全的。线程不安全性能更高，所以在开发中，优先采用StringBuilder.StringBuilder &gt; StringBuffer &gt; String（性能比较） StringBuffer中每个方法都加了synchronized修饰关于选用哪个类的场景“不考虑安全的情况，选用StringBuilder；不考虑安全的情况，选用StringBuffer。”的说法是错误的！！！ 因为当多线程情况下才需要考虑这些，单线程是不需要考虑的。直接上性能！ 开发中，用StringBuider来解决什么问题？字符拼接： ​ 在方法内使用：StringBuilder.append(“”);","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"002.final的用法及相关注意点","slug":"002-final的用法及相关注意点","date":"2020-09-28T03:46:49.000Z","updated":"2020-09-28T09:02:32.058Z","comments":true,"path":"2020/09/28/002-final的用法及相关注意点/","link":"","permalink":"/2020/09/28/002-final的用法及相关注意点/","excerpt":"","text":"final修饰类，表示类不可变，不可继承 比如，String，不可变性 final修饰方法，表示该方法不可重写 比如模板方法，可以固定我们的算法 final修饰变量，这个变量就是常量 注意： 修饰的是基本数据类型，这个值本身不能修改 修饰的是引用类型，引用的指向不能修改 比如下面的代码是可以的 final Student student = new Student(1,&quot;Andy&quot;); student.setAge(18);//注意，这个是可以的！","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"001.“==” 与 equals的区别","slug":"001-==和equals的区别","date":"2020-09-28T03:00:00.000Z","updated":"2020-09-28T09:02:12.703Z","comments":true,"path":"2020/09/28/001-==和equals的区别/","link":"","permalink":"/2020/09/28/001-==和equals的区别/","excerpt":"","text":"“==” 与 equals的区别 == 比较的是值比较基本的数据类型，比较的是数值 比较引用类型：比较引用指向的值（地址） equals默认比较也是地址，因为这个方法的最初定义在Object上，默认的实现就是比较地址 自定义的类，如果需要比较的是内容，那么就要学String，重写equals方法 代码案例：测试以下的每道题，你是否能够正确得到答案？ String s = “java”; String s = new String(“java”); 这两者的内存分配方式是不一样的。 第一种方式，JVM会将其分配到常量池，而第二种方式是分配到堆内存 /** * 测试 == 和 eauals */ @Test public void test01(){ String s1 = new String(&quot;zs&quot;); String s2 = new String(&quot;zs&quot;); System.out.println(s1 == s2); // false String s3 = &quot;zs&quot;; // 指向常量池地址 String s4 = &quot;zs&quot;; System.out.println(s3 == s4); // true System.out.println(s3 == s1); // false String s5 = &quot;zszs&quot;; String s6 = s3+s4; System.out.println(s5 == s6); // false ：字符串是个不可变对象，相加时需要创建新对象（相当于new了一下） 用反编译工具验证 final String s7 = &quot;zs&quot;; // final修饰的不再是变量，是常量 final String s8 = &quot;zs&quot;; String s9 = s7+s8; // 编译器在处理常量运算的时候，会进行优化，将二者之和再转变为常量 System.out.println(s5 == s9); // true final String s10 = s3+s4; // 右边依然是变量，所以创建的时候还是要new，而final是影响的s10，而不会影响s3+s4的特性 System.out.println(s5 == s10); // false }","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Java基础","slug":"Java基础","permalink":"/tags/Java基础/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]},{"title":"写发文章步骤.md","slug":"Hexo写发文章步骤","date":"2020-09-28T02:22:01.000Z","updated":"2020-10-02T06:34:58.103Z","comments":true,"path":"2020/09/28/Hexo写发文章步骤/","link":"","permalink":"/2020/09/28/Hexo写发文章步骤/","excerpt":"","text":"1、编辑 2、本地预览在博客文件夹右键Bash，输入（hexo generate） hexo g 生成之后，再输入（hexo server的简写） hexo s 来启动博客，通过给定的地址进行本地预览。 2、发布 发布到github Ctrl+C停止本地预览。 输入(hexo deploy) hexo d 将改动后的博客部署到github上。在网络畅通的情况下，很快可以刷新出更新后的博客。","categories":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}],"tags":[{"name":"Hexo写文章","slug":"Hexo写文章","permalink":"/tags/Hexo写文章/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"/categories/技术/"}]}]}